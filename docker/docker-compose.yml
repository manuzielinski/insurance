version: "3.8"

services:
  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: insurance_zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports: ["2181:2181"]
    volumes:
      - zkdata:/bitnami/zookeeper

  kafka:
    image: bitnami/kafka:3.7
    container_name: insurance_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"     # acceso desde el host (Windows)
    environment:
      # ZK mode
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      # Dos listeners: uno interno (dentro de la red docker) y otro para el host
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 8
    volumes:
      - kafkadata:/bitnami/kafka

  postgres:
    image: postgres:14
    container_name: insurance_postgres
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: brokerdb
    ports: ["5432:5432"]
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d brokerdb"]
      interval: 5s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: insurance_redis
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    volumes:
      - redisdata:/data

volumes:
  zkdata:
  kafkadata:
  pgdata:
  redisdata:
